/* global describe, it */

var assert = require('assert');
var BN = require('../').BN;
var fixtures = require('./fixtures');

describe('BN.js/Arithmetic', function () {
  describe('.add()', function () {
    it('should add numbers', function () {
      assert.equal(new BN(14).add(new BN(26)).toString(16), '28');
      var k = new BN(0x1234);
      var r = k;

      for (var i = 0; i < 257; i++) {
        r = r.add(k);
      }

      assert.equal(r.toString(16), '125868');
    });

    it('should handle carry properly (in-place)', function () {
      var k = new BN('abcdefabcdefabcdef', 16);
      var r = new BN('deadbeef', 16);

      for (var i = 0; i < 257; i++) {
        r.iadd(k);
      }

      assert.equal(r.toString(16), 'ac79bd9b79be7a277bde');
    });

    it('should properly do positive + negative', function () {
      var a = new BN('abcd', 16);
      var b = new BN('-abce', 16);

      assert.equal(a.iadd(b).toString(16), '-1');

      a = new BN('abcd', 16);
      b = new BN('-abce', 16);

      assert.equal(a.add(b).toString(16), '-1');
      assert.equal(b.add(a).toString(16), '-1');
    });
  });

  describe('.iaddn()', function () {
    it('should allow a sign change', function () {
      var a = new BN(-100);
      assert.equal(a.negative, 1);

      a.iaddn(200);

      assert.equal(a.negative, 0);
      assert.equal(a.toString(), '100');
    });

    it('should add negative number', function () {
      var a = new BN(-100);
      assert.equal(a.negative, 1);

      a.iaddn(-200);

      assert.equal(a.toString(), '-300');
    });

    it('should allow neg + pos with big number', function () {
      var a = new BN('-1000000000', 10);
      assert.equal(a.negative, 1);

      a.iaddn(200);

      assert.equal(a.toString(), '-999999800');
    });

    it('should carry limb', function () {
      var a = new BN('3ffffff', 16);

      assert.equal(a.iaddn(1).toString(16), '4000000');
    });

    it('should throw error with num eq 0x4000000', function () {
      assert.throws(function () {
        new BN(0).iaddn(0x4000000);
      }, /^Error: Assertion failed$/);
    });
  });

  describe('.sub()', function () {
    it('should subtract small numbers', function () {
      assert.equal(new BN(26).sub(new BN(14)).toString(16), 'c');
      assert.equal(new BN(14).sub(new BN(26)).toString(16), '-c');
      assert.equal(new BN(26).sub(new BN(26)).toString(16), '0');
      assert.equal(new BN(-26).sub(new BN(26)).toString(16), '-34');
    });

    var a = new BN(
      '31ff3c61db2db84b9823d320907a573f6ad37c437abe458b1802cda041d6384' +
      'a7d8daef41395491e2',
      16);
    var b = new BN(
      '6f0e4d9f1d6071c183677f601af9305721c91d31b0bbbae8fb790000',
      16);
    var r = new BN(
      '31ff3c61db2db84b9823d3208989726578fd75276287cd9516533a9acfb9a67' +
      '76281f34583ddb91e2',
      16);

    it('should subtract big numbers', function () {
      assert.equal(a.sub(b).cmp(r), 0);
    });

    it('should subtract numbers in place', function () {
      assert.equal(b.clone().isub(a).neg().cmp(r), 0);
    });

    it('should subtract with carry', function () {
      // Carry and copy
      var a = new BN('12345', 16);
      var b = new BN('1000000000000', 16);
      assert.equal(a.isub(b).toString(16), '-fffffffedcbb');

      a = new BN('12345', 16);
      b = new BN('1000000000000', 16);
      assert.equal(b.isub(a).toString(16), 'fffffffedcbb');
    });
  });

  describe('.isubn()', function () {
    it('should subtract negative number', function () {
      var r = new BN(
        '7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b', 16);
      assert.equal(r.isubn(-1).toString(16),
        '7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681c');
    });

    it('should work for positive numbers', function () {
      var a = new BN(-100);
      assert.equal(a.negative, 1);

      a.isubn(200);
      assert.equal(a.negative, 1);
      assert.equal(a.toString(), '-300');
    });

    it('should not allow a sign change', function () {
      var a = new BN(-100);
      assert.equal(a.negative, 1);

      a.isubn(-200);
      assert.equal(a.negative, 0);
      assert.equal(a.toString(), '100');
    });

    it('should change sign on small numbers at 0', function () {
      var a = new BN(0).subn(2);
      assert.equal(a.toString(), '-2');
    });

    it('should change sign on small numbers at 1', function () {
      var a = new BN(1).subn(2);
      assert.equal(a.toString(), '-1');
    });

    it('should throw error with num eq 0x4000000', function () {
      assert.throws(function () {
        new BN(0).isubn(0x4000000);
      }, /^Error: Assertion failed$/);
    });
  });

  function testMethod (name, mul) {
    describe(name, function () {
      it('should multiply numbers of different signs', function () {
        var offsets = [
          1, // smallMulTo
          250, // comb10MulTo
          1000, // bigMulTo
          15000 // jumboMulTo
        ];

        for (var i = 0; i < offsets.length; ++i) {
          var x = new BN(